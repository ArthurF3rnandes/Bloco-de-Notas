//  tarefa unisinos codigo em C, análise e aplicação de sistemas operacionais.

// para acessar ela deve realizar os seguintes comandos no Linux:
// cd tarefa
// ls (para visualizar se as pastas estão corretas mesmo, lembrando que deve ter já feito previamente o download via curl do site da globo que é o que estamos usando para ler a palavra ''Brasil'' que foi enviado a pasta listas.txt)
// ./tarefa2 (para executar a tarefa)


#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>

#define TAM 10

// isso imprime a matriz
void imprimirMatriz(int matriz[TAM][TAM]) {
    for (int i = 0; i < TAM; i++) {
        for (int j = 0; j < TAM; j++) {
            printf("%4d", matriz[i][j]);
        }
        printf("\n");
    }
}

// aqui é para imprimir a transposta da matriz
void imprimirTransposta(int matriz[TAM][TAM]) {
    for (int i = 0; i < TAM; i++) {
        for (int j = 0; j < TAM; j++) {
            printf("%4d", matriz[j][i]);
        }
        printf("\n");
    }
}

int main() {
    int matriz[TAM][TAM];
    int valor = 1;
    int status;

    // contabilizando a matriz com os valores de 1 a 100
    for (int i = 0; i < TAM; i++) {
        for (int j = 0; j < TAM; j++) {
            matriz[i][j] = valor++;
        }
    }

    pid_t pid = fork();

    if (pid < 0) {
        perror("Erro ao criar processo filho");
        exit(EXIT_FAILURE);
    }

    if (pid == 0) {
        // processo do filhao
        printf("\n[Filho - PID %d] Ao buscar pela palavra \"brasil\" no arquivo lista.txt a quantidade que temos é:\n", getpid());

        // aqui vai para contar a palavra ''brasil'' no arquivo .txt do site
        execlp("sh", "sh", "-c", "egrep -o brasil lista.txt | wc -l", NULL);

        // caso o exec falhe
        perror("Erro ao executar comando com exec");
        exit(EXIT_FAILURE);
    } else {
        // processo do paizao
        printf("[Pai - PID %d] Matriz original:\n", getpid());
        imprimirMatriz(matriz);

        printf("\n[Pai - PID %d] Matriz transposta:\n", getpid());
        imprimirTransposta(matriz);

        // aqui ele vai esperar o filhao
        wait(&status);

        if (WIFEXITED(status)) {
            printf("\n[Pai] Processo filho finalizado com status %d\n", WEXITSTATUS(status));
        } else {
            printf("\n[Pai] Processo filho finalizou de forma anormal.\n");
        }
    }

    return 0;
}
